"use client"

import { useState } from "react"
import {
  SiPython,
  SiFastapi,
  SiReact,
  SiSelenium,
  SiJavascript,
  SiPytorch,
  SiMysql,   // Example extra icon
} from "react-icons/si"

// Define a TypeScript interface for a project
interface Project {
  title: string
  tech: string
  year: string
  details: string[]
}

// Define your project data
const projectsData: Project[] = [
  {
    title: "AI Image Detector",
    tech: "Python, FastAPI, TensorFlow, React",
    year: "2024",
    details: [
      "Developed an AI-powered image classification system with a 4.2M parameter Vision Transformer (ViT) and ResNet-50 to detect images generated by diffusion models like Stable Diffusion, DALL-E, and MidJourney.",
      "Achieved an F1-score of 0.94 and precision-recall AUC of 0.96 on a dataset of 1.5 million images across 20 generative AI models.",
      "Implemented frequency-domain analysis with Discrete Wavelet Transform (DWT) and Fast Fourier Transform (FFT), reducing false positive rates by 35%.",
      "Applied ensemble learning with Soft Voting Classifiers, boosting adversarial robustness by 27% against evasion attacks using JPEG compression and Gaussian noise.",
      "Optimized Flask API for real-time inference, achieving a 65ms response time per image on an NVIDIA RTX 3090 GPU."
    ]
  },
  {
    title: "Resume Generator",
    tech: "Python, FastAPI, React, Mistral API, NLP",
    year: "2024",
    details: [
      "Engineered an AI-powered resume generator designed to support up to 15,000 concurrent users, delivering dynamic resume customizations for over 300 targeted companies with an average response time of 180ms.",
      "Implemented advanced NLP models, including a fine-tuned BERT variant, to extract and rank up to 500 job-specific keywords with a 92% precision rate, ensuring highly tailored resume content.",
      "Developed a robust FastAPI backend capable of processing 2,000+ requests per minute, paired with a React frontend optimized for 95% uptime, and integrated with the Mistral API for real-time personalization with sub-100ms latency."
    ]
  },
  {
    title: "Automation Portfolio",
    tech: "Python, Selenium, BeautifulSoup, UI Path",
    year: "2024",
    details: [
      "Developed an automation pipeline that converts YouTube videos into interactive H5P videos with embedded quizzes in under 5 minutes.",
      "Built a Python-based script that extracts video links from an Excel sheet and automates the entire processing workflow.",
      "Used Selenium and BeautifulSoup to fetch video metadata, including title, description, and subtitles, from YouTube.",
      "Automatically generated 10 quiz questions per video using NLP-based keyword extraction, enhancing user engagement.",
      "Optimized UI Path workflows to handle video downloads, processing, and H5P file generation with minimal manual intervention."
    ]
  }
]

const Projects = () => {
  const [expandedProjects, setExpandedProjects] = useState({
    aiImageDetector: false,
    resumeGenerator: false,
    automationPortfolio: false,
  })

  return (
    <section id="projects" className="min-h-screen py-16 flex flex-col items-center justify-center px-4">
      <div className="max-w-6xl w-full mx-auto">
        <h2 className="text-3xl sm:text-4xl font-bold mb-8 text-gradient text-center">Projects</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* First Project Card */}
          <div className="w-full">
            <div className="glass-card p-6 hover-lift flex flex-col transition-all duration-300 w-full">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                <div>
                  <h3 className="text-xl sm:text-2xl font-semibold">{projectsData[0].title}</h3>
                  <p className="text-xs sm:text-sm text-hero-text/80 mt-1">
                    {projectsData[0].tech} • {projectsData[0].year}
                  </p>
                </div>
              </div>

              <ul className="list-disc list-inside space-y-2 text-xs sm:text-sm md:text-base ml-4 mt-4 flex-grow">
                {(expandedProjects.aiImageDetector
                  ? projectsData[0].details
                  : projectsData[0].details.slice(0, 2)
                ).map((item, idx) => (
                  <li key={idx} className="leading-relaxed text-hero-text/90">
                    {item}
                  </li>
                ))}
              </ul>

              {projectsData[0].details.length > 2 && (
                <button
                  onClick={() =>
                    setExpandedProjects((prev) => ({
                      ...prev,
                      aiImageDetector: !prev.aiImageDetector,
                    }))
                  }
                  className="mt-4 text-blue-500 self-start focus:outline-none cursor-pointer relative z-20 hover:underline"
                >
                  {expandedProjects.aiImageDetector ? "Show Less" : "Read More"}
                </button>
              )}
            </div>
          </div>

          {/* Second Project Card */}
          <div className="w-full">
            <div className="glass-card p-6 hover-lift flex flex-col transition-all duration-300 w-full">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                <div>
                  <h3 className="text-xl sm:text-2xl font-semibold">{projectsData[1].title}</h3>
                  <p className="text-xs sm:text-sm text-hero-text/80 mt-1">
                    {projectsData[1].tech} • {projectsData[1].year}
                  </p>
                </div>
              </div>

              <ul className="list-disc list-inside space-y-2 text-xs sm:text-sm md:text-base ml-4 mt-4 flex-grow">
                {(expandedProjects.resumeGenerator
                  ? projectsData[1].details
                  : projectsData[1].details.slice(0, 2)
                ).map((item, idx) => (
                  <li key={idx} className="leading-relaxed text-hero-text/90">
                    {item}
                  </li>
                ))}
              </ul>

              {projectsData[1].details.length > 2 && (
                <button
                  onClick={() =>
                    setExpandedProjects((prev) => ({
                      ...prev,
                      resumeGenerator: !prev.resumeGenerator,
                    }))
                  }
                  className="mt-4 text-blue-500 self-start focus:outline-none cursor-pointer relative z-20 hover:underline"
                >
                  {expandedProjects.resumeGenerator ? "Show Less" : "Read More"}
                </button>
              )}
            </div>
          </div>

          {/* Third Project Card */}
          <div className="w-full">
            <div className="glass-card p-6 hover-lift flex flex-col transition-all duration-300 w-full">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                <div>
                  <h3 className="text-xl sm:text-2xl font-semibold">{projectsData[2].title}</h3>
                  <p className="text-xs sm:text-sm text-hero-text/80 mt-1">
                    {projectsData[2].tech} • {projectsData[2].year}
                  </p>
                </div>
              </div>

              <ul className="list-disc list-inside space-y-2 text-xs sm:text-sm md:text-base ml-4 mt-4 flex-grow">
                {(expandedProjects.automationPortfolio
                  ? projectsData[2].details
                  : projectsData[2].details.slice(0, 2)
                ).map((item, idx) => (
                  <li key={idx} className="leading-relaxed text-hero-text/90">
                    {item}
                  </li>
                ))}
              </ul>

              {projectsData[2].details.length > 2 && (
                <button
                  onClick={() =>
                    setExpandedProjects((prev) => ({
                      ...prev,
                      automationPortfolio: !prev.automationPortfolio,
                    }))
                  }
                  className="mt-4 text-blue-500 self-start focus:outline-none cursor-pointer relative z-20 hover:underline"
                >
                  {expandedProjects.automationPortfolio ? "Show Less" : "Read More"}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

const Skills = () => {
  return (
    <section id="skills" className="py-16 flex flex-col items-center justify-center px-4">
      <div className="max-w-6xl w-full mx-auto">
        <h2 className="text-3xl sm:text-4xl font-bold mb-8 text-gradient text-center">Skills</h2>
        <div className="flex flex-wrap justify-center gap-6">
          <div className="flex flex-col items-center">
            <SiPython className="text-5xl" />
            <p className="mt-2">Python</p>
          </div>
          <div className="flex flex-col items-center">
            <SiFastapi className="text-5xl" />
            <p className="mt-2">FastAPI</p>
          </div>
          <div className="flex flex-col items-center">
            <SiPytorch className="text-5xl" />
            <p className="mt-2">Pytorch</p>
          </div>
          <div className="flex flex-col items-center">
            <SiReact className="text-5xl" />
            <p className="mt-2">React</p>
          </div>
          <div className="flex flex-col items-center">
            <SiSelenium className="text-5xl" />
            <p className="mt-2">Selenium</p>
          </div>
          <div className="flex flex-col items-center">
            <SiMysql className="text-5xl" />
            <p className="mt-2">MySql</p>
          </div>
          <div className="flex flex-col items-center">
            <SiJavascript className="text-5xl" />
            <p className="mt-2">JavaScript</p>
          </div>
        </div>
      </div>
    </section>
  )
}

export default function Portfolio() {
  return (
    <main>
      <Projects />
      <Skills />
    </main>
  )
}
